# bot.py

import os
import tempfile
import subprocess
import logging

from dotenv import load_dotenv
import telebot
import whisper
from transformers import AutoTokenizer, AutoModelForSeq2SeqLM, pipeline

# ‚îÄ‚îÄ‚îÄ 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TG_TOKEN = os.getenv("TG_TOKEN", "").strip()
if not TG_TOKEN:
    raise RuntimeError("‚ùå –í .env –Ω–µ –Ω–∞–π–¥–µ–Ω TG_TOKEN")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s | %(message)s"
)
logging.info("–°—Ç–∞—Ä—Ç –±–æ—Ç–∞‚Ä¶")

# ‚îÄ‚îÄ‚îÄ 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞ –∏ Whisper ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
bot = telebot.TeleBot(TG_TOKEN)
whisper_model = whisper.load_model("small")

# ‚îÄ‚îÄ‚îÄ 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º RuT5SumGazeta —á–µ—Ä–µ–∑ safetensors ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
MODEL_NAME = "IlyaGusev/rut5_base_sum_gazeta"
tokenizer = AutoTokenizer.from_pretrained(
    MODEL_NAME,
    use_safetensors=True
)
model = AutoModelForSeq2SeqLM.from_pretrained(
    MODEL_NAME,
    use_safetensors=True,
    trust_remote_code=False
)
summarizer = pipeline(
    "summarization",
    model=model,
    tokenizer=tokenizer,
    device=-1,            # CPU; –¥–ª—è GPU —É–∫–∞–∂–∏—Ç–µ device=0
    framework="pt"
)

# ‚îÄ‚îÄ‚îÄ 4. –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ä–µ–∂–∏–º—ã —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FULL_TEXT_THRESHOLD = 5       # ‚â§5‚Äâ—Å ‚Äî –ø–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
MAX_DURATION        = 20 * 60 # –º–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 20 –º–∏–Ω
MAX_MESSAGE_LEN     = 4000    # –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –≤ Telegram

LENGTH_PARAMS = {
    "short":  (10,  64),
    "medium": (120, 384),
    "long":   (240, 768),
}
chat_length_mode = {}

# ‚îÄ‚îÄ‚îÄ 5. –£—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def convert_to_wav(src: str) -> str:
    dst = src.rsplit(".", 1)[0] + ".wav"
    subprocess.run(
        ["ffmpeg", "-y", "-i", src, "-ar", "16000", dst],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        check=True
    )
    return dst

def make_summary(text: str, mode: str) -> str:
    clean = " ".join(text.replace("\n", " ").split())
    min_len, max_len = LENGTH_PARAMS.get(mode, LENGTH_PARAMS["medium"])
    try:
        out = summarizer(
            clean,
            max_length=max_len,
            min_length=min_len,
            do_sample=False,
            truncation=True
        )
        return out[0]["summary_text"].strip()
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ (%s): %s", mode, e)
        return clean

def chunk_message(text: str, limit: int = MAX_MESSAGE_LEN) -> list[str]:
    parts = []
    while len(text) > limit:
        idx = text.rfind("\n", 0, limit)
        if idx <= 0:
            idx = limit
        parts.append(text[:idx].strip())
        text = text[idx:].lstrip()
    if text:
        parts.append(text)
    return parts

# ‚îÄ‚îÄ‚îÄ 6. –ö–æ–º–∞–Ω–¥—ã –≤—ã–±–æ—Ä–∞ –¥–ª–∏–Ω—ã –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(commands=["short"])
def cmd_short(m):
    chat_length_mode[m.chat.id] = "short"
    bot.reply_to(m, "–†–µ–∂–∏–º –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *–∫–æ—Ä–æ—Ç–∫–∏–π*.", parse_mode="Markdown")

@bot.message_handler(commands=["medium"])
def cmd_medium(m):
    chat_length_mode[m.chat.id] = "medium"
    bot.reply_to(m, "–†–µ–∂–∏–º –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *—Å—Ä–µ–¥–Ω–∏–π*.", parse_mode="Markdown")

@bot.message_handler(commands=["long"])
def cmd_long(m):
    chat_length_mode[m.chat.id] = "long"
    bot.reply_to(m, "–†–µ–∂–∏–º –∫–æ–Ω—Å–ø–µ–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *–¥–ª–∏–Ω–Ω—ã–π*.", parse_mode="Markdown")

# ‚îÄ‚îÄ‚îÄ 7. /start –∏ /help ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(commands=["start"])
def cmd_start(m):
    chat_length_mode[m.chat.id] = "medium"
    bot.reply_to(
        m,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞—Å—Ç—Ä–æ–π –¥–ª–∏–Ω—É –∫–æ–Ω—Å–ø–µ–∫—Ç–∞:\n"
        "/short  ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π\n"
        "/medium ‚Äî —Å—Ä–µ–¥–Ω–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "/long   ‚Äî –¥–ª–∏–Ω–Ω—ã–π\n\n"
        "–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ (OGG) –∏–ª–∏ –∞—É–¥–∏–æ (MP3) –¥–æ 20 –º–∏–Ω:\n"
        f"‚Ä¢ ‚â§{FULL_TEXT_THRESHOLD}s ‚Äî –ø–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç\n"
        "‚Ä¢ >5s ‚Äî –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∫–æ–Ω—Å–ø–µ–∫—Ç"
    )

@bot.message_handler(commands=["help"])
def cmd_help(m):
    bot.send_message(
        m.chat.id,
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        "/short  ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç\n"
        "/medium ‚Äî —Å—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç\n"
        "/long   ‚Äî –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Å–ø–µ–∫—Ç\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –ø—Ä–∏—à–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ/–∞—É–¥–∏–æ –¥–æ 20 –º–∏–Ω:\n"
        f"‚Ä¢ ‚â§{FULL_TEXT_THRESHOLD}s ‚Äî –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ >5s ‚Äî –∫–æ–Ω—Å–ø–µ–∫—Ç"
    )

# ‚îÄ‚îÄ‚îÄ 8. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–π ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(content_types=["voice", "audio"])
def handle_audio(m):
    if m.content_type == "voice":
        fid, dur = m.voice.file_id, m.voice.duration
    else:
        fid, dur = m.audio.file_id, m.audio.duration or 0

    logging.info("–ü–æ–ª—É—á–µ–Ω–æ %s –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é %d—Å", m.content_type, dur)
    if dur > MAX_DURATION:
        return bot.send_message(m.chat.id, f"‚ö†Ô∏è –î–ª–∏–Ω–∞ –∞—É–¥–∏–æ ‚â§ {MAX_DURATION//60} –º–∏–Ω.")

    info = bot.get_file(fid)
    raw  = bot.download_file(info.file_path)
    ext  = os.path.splitext(info.file_path)[1] or ".ogg"
    src  = tempfile.NamedTemporaryFile(suffix=ext, delete=False).name
    with open(src, "wb") as f:
        f.write(raw)

    try:
        wav = convert_to_wav(src)
        txt = whisper_model.transcribe(wav)["text"].strip()
        logging.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: %.60s‚Ä¶", txt)

        if dur <= FULL_TEXT_THRESHOLD:
            parts = [f"*Transcript:*\n{txt}"]
        else:
            mode = chat_length_mode.get(m.chat.id, "medium")
            summary = make_summary(txt, mode)
            parts = chunk_message(f"*Summary ({mode}):*\n{summary}")

        for part in parts:
            bot.send_message(m.chat.id, part, parse_mode="Markdown")

    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
        bot.send_message(m.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
    finally:
        for fn in (src, locals().get("wav")):
            if fn and os.path.exists(fn):
                os.remove(fn)

# ‚îÄ‚îÄ‚îÄ 9. –ó–∞–ø—É—Å–∫ polling ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞—é polling‚Ä¶")
    bot.infinity_polling()
