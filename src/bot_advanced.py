# bot.py

import os
import tempfile
import subprocess
import logging

from dotenv import load_dotenv
import telebot
import whisper
from summa.summarizer import summarize as summa_summarize

# ‚îÄ‚îÄ‚îÄ 1. –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
TG_TOKEN = os.getenv("TG_TOKEN", "").strip()
assert TG_TOKEN, "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ TG_TOKEN –≤ —Ñ–∞–π–ª–µ .env"

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s %(levelname)s | %(message)s"
)
logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞‚Ä¶")

bot = telebot.TeleBot(TG_TOKEN)

# ‚îÄ‚îÄ‚îÄ 2. Whisper-–º–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
whisper_model = whisper.load_model("small")

# ‚îÄ‚îÄ‚îÄ 3. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
FULL_TEXT_THRESHOLD = 5  # ‚â§5‚Äâ—Å ‚Äî –ø–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç
MAX_DURATION = 20 * 60  # –º–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (20 –º–∏–Ω)
SUMMARY_RATIO = 0.2  # –±—Ä–∞—Ç—å 20% —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π


# ‚îÄ‚îÄ‚îÄ 4. –£—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def convert_to_wav(src_path: str) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –ª—é–±–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª (.ogg, .mp3 –∏ —Ç.–¥.)
    –≤ WAV 16‚ÄâkHz —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π ffmpeg.
    """
    dst = src_path.rsplit(".", 1)[0] + ".wav"
    subprocess.run(
        ["ffmpeg", "-y", "-i", src_path, "-ar", "16000", dst],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.DEVNULL,
        check=True,
    )
    return dst


def make_summary(text: str) -> str:
    """
    Extractive TextRank-–∫–æ–Ω—Å–ø–µ–∫—Ç —á–µ—Ä–µ–∑ summa: –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã–µ
    –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–∂–∏–º–∞—è —Ç–µ–∫—Å—Ç –¥–æ SUMMARY_RATIO.
    """
    clean = " ".join(text.replace("\n", " ").split()).strip()
    try:
        sents = summa_summarize(clean, ratio=SUMMARY_RATIO, split=True)
        if not sents:
            return clean
        return "\n".join(sents)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ summa_summarize")
        return clean


# ‚îÄ‚îÄ‚îÄ 5. –ö–æ–º–∞–Ω–¥—ã /start –∏ /help ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(commands=["start"])
def cmd_start(msg):
    bot.reply_to(
        msg,
        "üëã –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ (OGG) –∏–ª–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª (MP3) –¥–æ 20 –º–∏–Ω, "
        "—è –≤–µ—Ä–Ω—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç –∏–ª–∏ –∫–æ–Ω—Å–ø–µ–∫—Ç.",
    )


@bot.message_handler(commands=["help"])
def cmd_help(msg):
    bot.send_message(
        msg.chat.id,
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help  ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –ø–æ–¥—Å–∫–∞–∑–∫—É\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –∞—É–¥–∏–æ:\n"
        f"‚Ä¢ ‚â§{FULL_TEXT_THRESHOLD}s ‚Äî –ø–æ–ª–Ω—ã–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç\n"
        f"‚Ä¢ >{FULL_TEXT_THRESHOLD}s ‚Äî –∫–æ–Ω—Å–ø–µ–∫—Ç (~{int(SUMMARY_RATIO*100)}%)\n"
        f"‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {MAX_DURATION//60} –º–∏–Ω",
    )


# ‚îÄ‚îÄ‚îÄ 6. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∏ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@bot.message_handler(content_types=["voice", "audio"])
def handle_audio(msg):
    # 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º file_id –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if msg.content_type == "voice":
        file_id, duration = msg.voice.file_id, msg.voice.duration
    else:
        file_id, duration = msg.audio.file_id, msg.audio.duration or 0

    logging.info("–ü–æ–ª—É—á–µ–Ω–æ %s, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å %d —Å", msg.content_type, duration)

    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if duration > MAX_DURATION:
        bot.send_message(
            msg.chat.id, f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî {MAX_DURATION//60} –º–∏–Ω."
        )
        return

    # 3) –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
    info = bot.get_file(file_id)
    raw = bot.download_file(info.file_path)
    ext = os.path.splitext(info.file_path)[1] or ".ogg"
    src = tempfile.NamedTemporaryFile(suffix=ext, delete=False).name
    with open(src, "wb") as f:
        f.write(raw)

    try:
        # 4) –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
        wav = convert_to_wav(src)

        # 5) –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Whisper
        text = whisper_model.transcribe(wav)["text"].strip()
        logging.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç: %.50s‚Ä¶", text)

        # 6) –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if duration <= FULL_TEXT_THRESHOLD:
            response = f"*Transcript:*\n{text}"
        else:
            summary = make_summary(text)
            response = f"*–ö–æ–Ω—Å–ø–µ–∫—Ç:*\n{summary}"

        # 7) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(msg.chat.id, response, parse_mode="Markdown")

    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
        bot.send_message(msg.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
    finally:
        # 8) –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for p in (src, locals().get("wav")):
            if p and os.path.exists(p):
                os.remove(p)


# ‚îÄ‚îÄ‚îÄ 7. –ó–∞–ø—É—Å–∫ polling ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    logging.info("–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω, –Ω–∞—á–∏–Ω–∞—é polling‚Ä¶")
    bot.infinity_polling()
